----------------------------------------------------------------
    Виды Retention:

@Retention позволяет указать жизненный цикл аннотации:
Будет ли она только в исходном коде (SOURCE)
В скомпилированном файле (CLASS{java}/BINARY{kotlin})
Видна в процессе выполнения (RUNTIME)
----------------------------------------------------------------
    Граф зависимостей:

Совокупность всех объектов, которые умеет создавать компонент
- это граф объектов компонента или граф зависимостей компонента.
----------------------------------------------------------------
 Показать работу скоупа
----------------------------------------------------------------
    Как работают generated-классы (разобраться с внутренностями)

Сгенерированный класс реализует интерфейс написанного компонента.
Хранит в себе все доступные провайдеры (соответственно построенному графу зависимостей);
inject() - это get(). В inject передаётся instance для заполнения зависимостями;
Внешние зависимости компонента - static (вроде как)
----------------------------------------------------------------
//добавить квалификаторы (2 способа описания)
----------------------------------------------------------------
//subcomponents
----------------------------------------------------------------
//можно ли управлять жизненным циклом через scope
